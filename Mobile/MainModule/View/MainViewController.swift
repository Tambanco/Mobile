//
//  MainViewController.swift
//  Mobile
//
//  Created tambanco ðŸ¥³ on 20.08.2022.
//
//  Template generated by Tambanco
//

import UIKit
import SnapKit

class MainViewController: UIViewController {
    private var presenter: MainPresenterProtocol!
    private var categoriesView: CategoriesView!
    private lazy var categoriesCollectionView = createCollectionView()
    private var searchBarView: SearchBarView!
    private var hotSalesView: HotSalesView!
    private var hotSalesCollectionView: UICollectionView!
    private var categories: [String] = ["Phones", "Computer", "Health", "Books", "Other"]
    
    init(presenter: MainPresenterProtocol) {
        self.presenter = presenter
        
        super.init(nibName: nil, bundle: nil)
    }
    
    private func createCollectionView() -> UICollectionView {
        fatalError()
    }
//    convenience init() {
//        self.init(presenter: MainPresenter())
//
//    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupMainView()
        setupCategoriesView()
        setupCollectionView()
        setupSearchBarView()
        setupHotSalesView()
        setupHotSalesCollectionView()
    }
    
    private func setupHotSalesCollectionView() {
        let layout = UICollectionViewFlowLayout()
        layout.sectionInset = UIEdgeInsets(top: 5, left: 5, bottom: 5, right: 5)
        layout.itemSize = CGSize(width: 90, height: 90)
        layout.scrollDirection = .horizontal
        hotSalesCollectionView = UICollectionView(frame: CGRect.zero, collectionViewLayout: layout)
        hotSalesCollectionView.allowsMultipleSelection = false
        hotSalesCollectionView.allowsSelection = true
        hotSalesCollectionView.backgroundColor = .clear
        
        hotSalesView.addSubview(hotSalesCollectionView)
        
        hotSalesCollectionView.snp.makeConstraints { make in
            make.leading.equalToSuperview()
            make.top.equalTo(10)
            make.trailing.equalToSuperview()
            make.bottom.equalToSuperview()
        }
        
        hotSalesCollectionView.register(CategoryCell.self, forCellWithReuseIdentifier: CategoryCell.reuseId)
        
        hotSalesCollectionView.dataSource = self
        hotSalesCollectionView.delegate = self
    }
    
    private func setupHotSalesView() {
        hotSalesView = HotSalesView(frame: CGRect(x: 0, y: 0, width: 0, height: 0))
        view.addSubview(hotSalesView)
        hotSalesView.backgroundColor = .systemOrange
        
        hotSalesView.snp.makeConstraints { make in
            make.leading.equalToSuperview()
            make.top.equalTo(searchBarView.snp.bottom)
            make.trailing.equalToSuperview()
            make.height.equalTo(200)
        }
    }
    
    private func setupSearchBarView() {
        searchBarView = SearchBarView(frame: CGRect(x: 0, y: 0, width: 0, height: 0))
        view.addSubview(searchBarView)
        
        searchBarView.searchBar.clipsToBounds = true
        searchBarView.searchBar.layer.cornerRadius = 17
        searchBarView.searchBar.layer.maskedCorners = [.layerMinXMinYCorner, .layerMaxXMinYCorner, .layerMinXMaxYCorner, .layerMaxXMaxYCorner]
        let directionalMargins = NSDirectionalEdgeInsets(top: 0, leading: 24, bottom: 0, trailing: 0)
        searchBarView.searchBar.directionalLayoutMargins = directionalMargins
        
        searchBarView.searchBar.layer.borderWidth = 0
        searchBarView.searchBar.layer.borderColor = UIColor.clear.cgColor
        
        searchBarView.searchBar.searchTextField.layer.borderWidth = 0
        searchBarView.searchBar.searchTextField.layer.borderColor = UIColor.clear.cgColor
        
        searchBarView.snp.makeConstraints { make in
            make.leading.equalToSuperview()
            make.top.equalTo(categoriesView.snp.bottom)
            make.trailing.equalToSuperview()
            make.height.equalTo(60)
        }
    }
    
    private func setupMainView() {
        self.view.backgroundColor = UIColor(hexString: "#E5E5E5")
    }
    
    private func  setupCategoriesView() {
        categoriesView = CategoriesView(frame: CGRect(x: 0, y: 0, width: 0, height: 0))
        view.addSubview(categoriesView)
        
        categoriesView.snp.makeConstraints { make in
            make.leading.equalToSuperview()
            make.top.equalTo(self.view.safeAreaLayoutGuide)
            make.trailing.equalToSuperview()
            make.height.equalTo(200)
        }
    }
    
    func setupCollectionView() {
        let layout = UICollectionViewFlowLayout()
        layout.sectionInset = UIEdgeInsets(top: 5, left: 5, bottom: 5, right: 5)
        layout.itemSize = CGSize(width: 90, height: 90)
        layout.scrollDirection = .horizontal
        categoriesCollectionView = UICollectionView(frame: CGRect.zero, collectionViewLayout: layout)
        categoriesCollectionView.allowsMultipleSelection = false
        categoriesCollectionView.allowsSelection = true
        categoriesCollectionView.backgroundColor = .clear
        
        categoriesView.addSubview(categoriesCollectionView)
        
        categoriesCollectionView.snp.makeConstraints { make in
            make.leading.equalToSuperview()
            make.top.equalTo(54)
            make.trailing.equalToSuperview()
            make.bottom.equalToSuperview()
        }
        
        categoriesCollectionView.register(CategoryCell.self, forCellWithReuseIdentifier: CategoryCell.reuseId)
        
        categoriesCollectionView.dataSource = self
        categoriesCollectionView.delegate = self
    }
}

// MARK: - CollectionView methods
extension MainViewController: UICollectionViewDataSource, UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        categories.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CategoryCell.reuseId, for: indexPath) as! CategoryCell
        cell.categoryLabel.text = categories[indexPath.row]
        cell.categoryImageView.image = UIImage(named: "\(categories[indexPath.row])")
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        guard let cell = collectionView.cellForItem(at: indexPath) as? CategoryCell else {
            return
        }
//        cell.ellipseView.backgroundColor = UIColor(hexString: "FF6E4E")
        cell.categoryLabel.textColor = UIColor(hexString: "FF6E4E")
    }
    
    func collectionView(_ collectionView: UICollectionView, didDeselectItemAt indexPath: IndexPath) {
        guard let cell = collectionView.cellForItem(at: indexPath) as? CategoryCell else {
            return
        }
//        cell.ellipseView.backgroundColor = UIColor(hexString: "FFFFFF")
        cell.categoryLabel.textColor = UIColor(hexString: "010035")
    }
}

// MARK: - Binding
extension MainViewController: MainViewProtocol {
    
}


